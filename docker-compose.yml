version: '3'


services:
  bitwarden:
    # Standard Bitwarden is very resource-heavy and cannot run on micro cloud instances
    # Vaultwarden is a Rust (mostly) feature-complete implementation of Bitwarden
    # https://github.com/dani-garcia/vaultwarden
    image: vaultwarden/server:alpine
    restart: always
    container_name: bitwarden
    depends_on: 
    - proxy
    volumes:
    - vaultwarden-data:/data/
    environment:
    - LOG_FILE=/data/bitwarden.log
    - WEBSOCKET_ENABLED=true            # required for websockets
    - SHOW_PASSWORD_HINT=false
    - DOMAIN=https://${DOMAIN}          # DOMAIN is set in .env but doesn't have protocol prefix
    - SMTP_FROM_NAME=Bitwarden (${DOMAIN})
    - IP_HEADER=X-Forwarded-For
    - ADMIN_TOKEN                       # Value-less variables are set in .env
    - SIGNUPS_ALLOWED
    - SMTP_HOST
    - SMTP_FROM
    - SMTP_PORT
    - SMTP_SECURITY
    - SMTP_USERNAME
    - SMTP_PASSWORD
    - YUBICO_CLIENT_ID
    - YUBICO_SECRET_KEY
    - YUBICO_SERVER
    - ORG_CREATION_USERS
    - TZ

  backup:
    # https://github.com/ttionya/vaultwarden-backup
    image: ttionya/vaultwarden-backup
    restart: always
    depends_on:
    - bitwarden
    environment:
    - RCLONE_REMOTE_NAME
    - RCLONE_REMOTE_DIR
    - RCLONE_GLOBAL_FLAG
    - CRON
    - ZIP_ENABLE
    - ZIP_PASSWORD
    - ZIP_TYPE
    - BACKUP_FILE_DATE_SUFFIX
    - BACKUP_KEEP_DAYS
    - PING_URL
    - MAIL_SMTP_ENABLE
    - MAIL_SMTP_VARIABLES
    - MAIL_TO
    - MAIL_WHEN_SUCCESS
    - MAIL_WHEN_FAILURE
      - TZ
    volumes:
    - vaultwarden-data:/bitwarden/data/
    - vaultwarden-rclone-data:/config/

  proxy:
    image: caddy:alpine
    restart: always
    container_name: proxy
    volumes:
    - ${PWD}/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
    - ${PWD}/caddy/data:/data
    # ports:
    # - 80:80
    environment:
    - LOG_FILE=/data/logs/caddy.log
    - TZ
    labels:
    - "com.centurylinklabs.watchtower.enable=false"

  cloudflared:
    image: cloudflare/cloudflared
    container_name: cloudflared
    restart: always
    user: root
    depends_on:
    - proxy
    command: tunnel run
    environment:
    - TUNNEL_TOKEN
    - TZ
    labels:
    - "com.centurylinklabs.watchtower.enable=false"

  watchtower:
    # Watchtower will pull down your new image, gracefully shut down your existing container 
    # and restart it with the same options that were used when it was deployed initially
    # https://github.com/containrrr/watchtower
    image: containrrr/watchtower
    restart: always
    container_name: watchtower
    depends_on: 
    - bitwarden
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
    - WATCHTOWER_CLEANUP=true
    - WATCHTOWER_SCHEDULE
    - TZ

volumes:
  vaultwarden-data:
    # Specify the name of the volume where you save the vaultwarden data,
    # use vaultwarden-data for new users
    # and bitwardenrs-data for migrated users
    name: vaultwarden-data
  vaultwarden-rclone-data:
    external: true
    # Specify the name of the volume where you save the rclone configuration,
    # use vaultwarden-rclone-data for new users
    # and bitwardenrs-rclone-data for migrated users
    name: vaultwarden-rclone-data